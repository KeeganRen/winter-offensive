1. in svo/include/svo/features.h line 37
Vector3d f;           //!< Unit-bearing vector of the feature.
what is unit-bearing?
feature's coordinate up to a unit distance

2. SVO_WARN_STREAM_THROTTLE(2.0, "First image has less than 100 features. Retry in more textured environment.");

addFirstFrame:
detect features (not the map points, just the good features to track)
check number of features
set reference frame
cp reference feature vector to current feature vector (because the output vector must have the same size as in the input in cv::calcOpticalFlowPyrLK method)

addSecondFram
trackklt
computeHomography
outlier remove
rescale the map to match the specified scale
all the inliers are projected on to both frame, bond to both frame, marked as initial map points

disparities_ distance between matched features of the first two frames

  /// Transforms pixel coordinates (c) to frame unit sphere coordinates (f).
  inline Vector3d c2f(const double x, const double y) const { return cam_->cam2world(x, y); }


what does it mean?
  vector<Feature*>              key_pts_;               //!< Five features and associated 3D points which are used to detect if two frames have overlapping field of view.


  list< FramePtr > keyframes_;          //!< List of keyframes in the map.
  list< pair<FramePtr,double> > close_kfs;
  map_.getCloseKeyframes(frame, close_kfs);
  for(auto it_kf=keyframes_.begin(), ite_kf=keyframes_.end(); it_kf!=ite_kf; ++it_kf)
        close_kfs.push_back(pair<FramePtr,double>(*it_kf,
                            (frame->T_f_w_.translation()-(*it_kf)->T_f_w_.translation()).norm()));

void Reprojector::reprojectMap(
    FramePtr frame,
    std::vector< std::pair<FramePtr,std::size_t> >& overlap_kfs)
  for(auto it_frame=close_kfs.begin(), ite_frame=close_kfs.end();
    FramePtr ref_frame = it_frame->first;
    overlap_kfs.push_back(pair<FramePtr,size_t>(ref_frame,0));


Map::Map() {}
Reprojector::Reprojector(vk::AbstractCamera* cam, Map& map) :
    map_(map)
{
  initializeGrid(cam);
}

FrameHandlerMono::resetAll
    resetCommon()
        map_.reset()
            keyframes_.clear()  //http://stackoverflow.com/questions/594089/does-stdvector-clear-do-delete-free-memory-on-each-element
                                //FramePtr is boost::share_ptr, it automatically handles the object releasing of the pointer
                ~Frame()
                    delete fts_
            point_candidates_.reset()
                delete PointCandidate.Point
                delete PointCandidate.Feature
                candidates_.clear()
            emptyTrash()
    last_frame_.reset() //http://stackoverflow.com/questions/621233/how-to-intentionally-delete-a-boostshared-ptr
    core_kfs_.clear()
    overlap_kfs_.clear()
    depth_filter_->reset()
        seeds_.clear()
        frame_queue_.pop()

point/feature life-cycle

KltHomographyInit::addFirstFrame()
    detectFeatures()
        detect()
           fts.push_back() 
        //fill px_vec f_vec i.e. px_ref_ f_ref_
        //util now no information has been set for frame
        //fts_ is still empty
KltHomographyInit::addSecondFrame()
    trackKlt()  //fill px_cur_ f_cur_ and disparities_ 
    computeHomography()
        Homography()    //get the T_c2_from_c1
        computeInliers()    //xyz_in_cur inliers outliers
                            //xyz_in_cur is 3d point coordinate in current frame, up to a scale
    //calc the map scale
    //adjust the translation part of current T
    //the first time create a true point!!!!!!!!!!!!!!!!!!!
    new Point()
    new Feature()
    frame_cur->addFeature()
    new_point->addFrameRef()
    new Feature()
    frame_ref_->addFeature()
    new_point->addFrameRef()
    klt_homography_init_.reset()
        px_cur_.clear()
        frame_ref_.reset()  //won't release the memory, because frame_ref_ has been referenced by the map_

void Map::emptyTrash()
{
  std::for_each(trash_points_.begin(), trash_points_.end(), [&](Point*& pt){
    delete pt;
    pt=NULL;
  });
  trash_points_.clear();
  point_candidates_.emptyTrash();
}

void MapPointCandidates::emptyTrash()
{
  std::for_each(trash_points_.begin(), trash_points_.end(), [&](Point*& p){
    delete p; p=NULL;
  });
  trash_points_.clear();
}

    TYPE_DELETED,
    TYPE_CANDIDATE,
    TYPE_UNKNOWN,
    TYPE_GOOD

reprojectMap()
    reprojectMapPoint()
    reprojectPointCandidate()
        if(n_failed_reproj_ > 30) move point candidate to trash and wait to delete

//a feature may contains a point pointer points to NULL
void Map::safeDeletePoint(Point* pt)
{
  // Delete references to mappoints in all keyframes
  std::for_each(pt->obs_.begin(), pt->obs_.end(), [&](Feature* ftr){
    ftr->point=NULL;
    ftr->frame->removeKeyPoint(ftr);
  });
  pt->obs_.clear();

  // Delete mappoint
  deletePoint(pt);
}

1.各种new
2. reprojectCell改变point的属性
3. 各种reset/clear/delete

void DepthFilter::updateSeeds(FramePtr frame)
      Point* point = new Point(xyz_world, it->ftr);
新的关键帧上除了在tracking阶段指出的点-特征对以外，还被depth_filter指出了一些新的fast角点，这些角点没有指定3D point, 当depth收敛过后，实例化point, 分配给这个特征
收敛过后，通过seed_converged_cb_将这个点加入到candidate

在稀疏匹配阶段，并不care特征的类型，不论是点特征还是边特征，处理方法都是相同的；而在第二阶段（包括了投影/块匹配/位姿估计三个子步骤），初步推断在SVO算法中，只有块匹配才会考虑点特征和边特征的不同。在depthfilter中，跟edge一点关系都没有……
为什么SVO没有使用edge类型的特征？
因为edge特征在做stereo matching的时候会发散，即垂直于梯度方向的位置不确定度会增大。在reprojectmap的过程中，通过2维搜索，总能找到最match的那个点，但对于边特征，只能做一维搜索，那么另一维的不确定度就会增大，而且会不断累积。

seed在创建的时候，需要绑定一个特征，这个特征关联的是提取到这个特征的关键帧。在updateSeeds的过程中，会经历若干次成功匹配，收敛过后，会创建一个新的point实体，这个实体只有一个特征点。这个point会加入到地图的candidates当中。这些candidates在队列中愉快的生活，在reprojectMap时跟正式map point一样投影到当前帧。但是应当注意到，每一次reproject都会根据成功与否对candidate和map point评分，UNKNOWN类型的point分数高的话可以晋级为GOOD类型, 分数低则会被删除；candidate类型的point则没有这么幸运，分数低的会被删除，分数高的却不会晋级。
candidate在新的关键帧加入的时候会转运，那时如果某个candidate刚好被这个新加入的关键帧观察到，就会晋升为UNKNOWN类型。在以后的reproject中，有机会变成GOOD point。
一个GOOD point是永久的，直到所有观察到这个point的关键帧都由于距离疏远移除地图，才会被删除。

考虑了edge的地方：
matcher.cpp
reprojector.cpp

depth_filter中，判断收敛的条件是
if(sqrt(it->sigma2) < it->z_range/options_.seed_convergence_sigma2_thresh)
